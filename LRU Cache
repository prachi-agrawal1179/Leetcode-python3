class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache={}
        self.last=[]
        

    def get(self, key: int) -> int:
        if key in self.cache:
            self.last.remove(key)
            self.last.append(key)
            return self.cache[key]
        else:
            return -1
        

    def put(self, key: int, value: int) -> None:
        self.cache[key]=value
        if key not in self.last:
            self.last.append(key)
        
        if key in self.last:
            self.last.remove(key)
            self.last.append(key)
            
        if len(self.cache)>self.capacity:
            k=self.last.pop(0)
            del self.cache[k]


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
